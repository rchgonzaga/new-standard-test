{% extends "layoutPadrao.html" %}

{% set module = 'pesagemproducao' %}

{% block content %}

	<script type="text/javascript">
		var mixin = {
			data: { 
				extraLoad: []
			},
			created: function () {
				this.sho();
			},
			methods: {
				sho: function(){
					console.log('MIXIN');
				}
			}
		};
		
		var executes = {
			onShow: [],
			onCreate: [],
			onCreateSub: [],
			onShowSub: [],
			onUpdateSub: []
		};
		
		// immutable
		var table = {
			id: null,
			id_pesagem: null,
			id_safra: null,
			id_silo: null,
			id_caminhao_frete: null,
			peso_bruto: null,
			peso_tara: null,
			peso_total: null,
			peso_umido: null,
			peso_limpo: null,
			peso_desconto: null,
			umidade: null,
			perc_umidade: null,
			impureza: null,
			perc_impureza: null,
			verdes: null,
			perc_verdes: null,
			partidos: null,
			perc_partidos: null,
			ardidos: null,
			perc_ardidos: null,
			picados: null,
			perc_picados: null,
			avariados: null,
			perc_avariados: null,
			nome_motorista: null,
			SafraTalhaoPesagemProducao: []
		};

		var toLoad = [
			{alias: null,entity: 'Silo', url: 'siloservice',	method: 'all', param: null},
			{alias: null,entity: 'SafraTalhao', url: 'safratalhaoservice',	method: 'all', param: null},
			{alias: null,entity: 'CaminhaoFrete', url: 'caminhaofreteservice',	method: 'all', param: null},
			{alias: null,entity: 'Talhao', url: 'talhaoservice',	method: 'all', param: null},
			{alias: null,entity: 'Safra', url: 'safraservice',	method: 'all', param: null},
			{alias: null,entity: 'TabelaClassificacao', url: 'tabelaclassificacaoservice',	method: 'all', param: null},
			{alias: null,entity: 'Umidade', url: 'tabelaindicevalorservice', method: 'findfull', param: 'null?field=id_tabela_classificacao_indices&value=1'},
			{alias: null,entity: 'Ardidos', url: 'tabelaindicevalorservice', method: 'findfull', param: 'null?field=id_tabela_classificacao_indices&value=2'},
			{alias: null,entity: 'Picados', url: 'tabelaindicevalorservice', method: 'findfull', param: 'null?field=id_tabela_classificacao_indices&value=3'},
			{alias: null,entity: 'Verdes', url: 'tabelaindicevalorservice', method: 'findfull', param: 'null?field=id_tabela_classificacao_indices&value=4'},
			{alias: null,entity: 'Impureza', url: 'tabelaindicevalorservice', method: 'findfull', param: 'null?field=id_tabela_classificacao_indices&value=5'},
			{alias: null,entity: 'Avariados', url: 'tabelaindicevalorservice', method: 'findfull', param: 'null?field=id_tabela_classificacao_indices&value=6'}
		];

		var computed = {
	        totalPages: function() {
	          return Math.ceil(100 / this.itemsPerPage)
	        }
	    };

	    var filters = {
	        paginate: function(list) {
	            var index = this.currentPage * this.itemsPerPage
	            return list.slice(index, index + this.itemsPerPage)
	        }
	    };
		
		var watch = {
			newEntity: {
				handler: function (val, oldVal) {
					console.log(val.verdes);
				},
				deep: true
			}
		};

		var globalData = {
			newEntity: table,
			success: false,
			edit: false,
			entities: [],
			subEntities: [],
			subEntitiesEdit: null,
	        searchKey: '',
	        currentPage: 0,
	        itemsPerPage: 15
		};
	</script>
	
	<div id="loadAjaxMask" class="ui active dimmer">
		<div class="ui text loader">Carregando</div>
	</div>

	<div id="{{module|capitalize}}Container">
		{{ macros.path( module|capitalize ~ '|Inicial')}}
		{{ macros.header( module|capitalize) }}

		{#<pre>
			<%$data | json%>
		</pre>#}

		{# MODAL TOPBAR #}
		{% include module ~ '/top-bar.twig' %}
		{# MODAL TOPBAR #}

		{# MODAL GRID #}
		{% include module ~ '/grid-' ~ module ~ '.twig' %}
		{# MODAL GRID #}

		{# MODAL DELETE #}
		{% include module ~ '/modal-confirmacao-delete.twig' %}
		{# MODAL DELETE #}

		{# MODAL NOVO #}
		{% include module ~ '/modal-novo-registro.twig' %}
		{# MODAL NOVO #}

		{# MODAL NOVO #}
		{% include module ~ '/modal-batch-update.twig' %}
		{# MODAL NOVO #}

	<script type="text/javascript">

	function resetForm(hideModal){

		$('#add{{module|capitalize}} input').popup('destroy');

		$('#add{{module|capitalize}} input').css('border', '1px solid rgba(34,36,38,.15)');
		$('#add{{module|capitalize}} input').removeAttr('data-content')
			.removeAttr('data-variation', 'inverted')
			.removeAttr('data-position', 'top left');

		if(hideModal){
			$('#add{{module|capitalize}}').modal('hide');
			$('#deleteConfirmation').modal('hide');
		}
	}

	function errorForm (data){
		var concat = '';

		$.each( data.errors, function( key, value ) {
			if( !$('#'+key).length ){
				concat += '\n' + value + '\n';	
			}
		});
			
		alertify.alert(
			'Oops, acho que algo deu errado !!!', 
			'<textarea style="margin: 0px;width: 100%;height: 114px;padding: 5px;">' + data.msg + ' - ' + concat + '</textarea>').show();
		
		$.each( data.errors, function( key, value ) {

			if($('#'+key).prop('tagName') == 'INPUT'){
				$('#'+key).css('border-color', 'red');

				$('#'+key).attr('data-content', value);
				$('#'+key).attr('data-variation', 'inverted');
				$('#'+key).attr('data-position', 'top left');
			} else {
				$('#'+key).parent().css('border-color', 'red');

				$('#'+key).parent().attr('data-content', value);
				$('#'+key).parent().attr('data-variation', 'inverted');
				$('#'+key).parent().attr('data-position', 'top left');
			}

		});
	}


	function start() {
		$('select').dropdown();
	    $("#loadAjaxMask").addClass( "active" );
	};
	
	var service = '{{module}}service';
	var subService = 'estadoservice';

	// altera o delimitador de template do Vue
	Vue.config.delimiters = ['<%', '%>'];

	var vm = new Vue({
		el: '#{{module|capitalize}}Container',

		// dados disponiveis no contexto
		data: globalData,
		
		/**
		 * Declaração de todos os metodos do modulo
		*/
  		mixins: [mixin],

		/**
		 * Declaração de todos os metodos do modulo
		*/
  		computed: computed,

		/**
		 * Declaração de todos os metodos do modulo
		*/
  		filters: filters,

		/**
		 * Declaração de todos os metodos do modulo
		*/
  		watch: watch,
		
		/**
		 * Declaração de todos os metodos do modulo
		*/
		methods: {

			formatNumber: function(number){
		    	var me = this;
				return numeral(number).format('0.000');
			},
		    
		    sumOfQuantities: function() {
		    	var me = this;
				return numeral(
					me.entities.reduce( function(total, entity){ 
						return total + (entity.peso_bruto - entity.peso_tara);
					}, 0)
				).format('0.000');
		    },

	        setPage: function(pageNumber) {
	          this.currentPage = pageNumber;

	          this.entities = [];

	          this.fetchData();
	        },

	        /**
	         *
	        */
			clear: function() {
				// Clear form input
				this.newEntity = table;
			},
			
			/**
			 * Executa chama de todos os metodos fetchAll
			*/
			fetchAll: function () {
				this.fetchData();
				this.fetchSubEntitiesData();
			},
			
			/**
			 * Recupera todos os dados
			*/
			fetchData: function () {
				resetForm();
				var me = this;
				this.$http.get('{{baseUrl()}}/'+service+'/all?start='+me.currentPage+'&limit='+me.itemsPerPage, function (data) {
					this.$set('entities', data);

			        $("#loadAjaxMask").removeClass( "active" );

				});	
			},
			
			/**
			 * Recupera todos os dados da subentitie
			*/
			fetchSubEntitiesData: function () {
				var me = this;
				resetForm();
				$.each( toLoad, function( key, val ) {

					var localUrl = '{{baseUrl()}}/'+val.url+'/'+val.method;
					if(val.param){
						localUrl += '/' + val.param;
					}

					me.$http.get(localUrl, function (data) {
						me.$set((val.alias ? val.alias : val.entity), data);
				        $("#loadAjaxMask").removeClass( "active" );
					});
				});
			},

			/**
			 * Metodo de criação de registro
			*/			
			batchUpdate: function(){
				var self = this;
				var elModal = $('#batch{{module|capitalize}}');

				elModal.modal({
					closable  : false,
					onDeny    : function() {return false;},
					onApprove : function() {return false;},
					onHide	  : function() {
						resetForm();

						// Clear form input
						self.clear();
					},
                    onVisible: function(){
                        var elModal = $('#batch{{module|capitalize}}');
                              
                        // if the height is higher than the normal, decrease the top margin    
                        if(elModal.height() > 420){
                            elModal.animate({ marginTop: '-283.5px' }, 100);
                        } else {
                            elModal.animate({ marginTop: '-209px' }, 100);
                        }


                    }
				}).modal('show');


			},
			
			/**
			 * Metodo de criação de registro
			*/
			new: function(){
				var self = this;
				var elModal = $('#add{{module|capitalize}}');

				resetForm();

				// Clear form input
				self.clear();

				elModal.modal({
					closable  : false,
					onDeny    : function() {return false;},
					onApprove : function() {return false;},
					onHide	  : function() {
						resetForm();

						// Clear form input
						self.clear();
					},
                    onVisible: function(){
                        var elModal = $('#add{{module|capitalize}}');
                              
                        // if the height is higher than the normal, decrease the top margin    
                        if(elModal.height() > 420){
                            elModal.animate({ marginTop: '-283.5px' }, 100);
                        } else {
                            elModal.animate({ marginTop: '-209px' }, 100);
                        }


                    }
				}).modal('show');
			},
			
			/**
			 * Metodo responsável por recuperar os dados para edição
			*/
			show: function(idEntity, event){
				var self = this;
				resetForm();

				$("#loadAjaxMask").addClass( "active" );

				this.$http.get('{{baseUrl()}}/'+service+'/findfull/'+idEntity, function (data) {
					this.$set('newEntity', data);

					$("#loadAjaxMask").removeClass( "active" );

					var elModal = $('#add{{module|capitalize}}');

					// Executa todos as funcões declaradas nos arquivos separados
					$.each( executes.onShow, function( key, func ) {
						func(self);
					});
                            
					elModal.modal({
						onVisible: function(){
                              
                            // if the height is higher than the normal, decrease the top margin    
                            if(elModal.height() > 420){
                                elModal.animate({ marginTop: '-283.5px' }, 100);
                            } else {
                                elModal.animate({ marginTop: '-209px' }, 100);
                            }

                            elModal.modal('refresh');

							// $(this).css({
							//     'margin' : '10px',
							//     'position' : 'fixed',
							//     'top' : '0',
							//     'bottom' : '0',
							//     'left' : '0',
							//     'right' : '0',
							//     'width' : 'auto'
							// });

						}
					})
					.modal('show');

				})
			},
			
			/**
			 * Metodo responsável por excluir um registro
			*/
			delete: function(idEntity, event){

				var self = this;
				resetForm();

				$('#deleteConfirmation')
				  .modal({
				    closable  : false,
				    onDeny    : function(){
						resetForm(true);
						return false;
				    },
				    onApprove : function() {

						self.$http.post('{{baseUrl()}}/'+service+'/postdelete', { id: idEntity })
						.success(function (response) {
						    alertify.success('Registro excluido');
						    self.fetchAll();
						})
						.error(function (response) {
						    alertify.error('Erro ao apagar registro');
						});

				    }
				  })
				  .modal('show')
				;
			},
			
			/**
			 * Reseta o form
			*/
			cancel: function(e){
				resetForm(true);
			},
			
			/**
			 * Metodo responsável por recuperar os dados para edição
			*/
			create: function (e) {

				e.preventDefault();

				var self = this;
				// User input
				var entity = _.pick(JSON.parse(JSON.stringify(this.newEntity)), _.keys(table));
                
                // Clear null values to prevent back-end error
				resetForm();

				// Executa todos as funcões declaradas nos arquivos separados
				$.each( executes.onCreate, function( key, func ) {
					func(entity);
				});

				// Send post request
				this.$http.post('{{baseUrl()}}/{{module}}service/postcreate', entity, function (data){
					
					if(data.success){
						// Reload page
						self.fetchData();
						alertify.success(data.msg);

						resetForm(true);

						// Clear form input
						self.clear();

					} else {
						// Reload page
						self.fetchData();

						// Treat the form errors
						errorForm(data);
			
						$('#add{{module|capitalize}} input').popup();
					}

				});

			},

			deleteSub: function(entity, e){
				e.preventDefault();
				this.newEntity.SafraTalhaoPesagemProducao.$remove(entity);
			},

			showSub: function(entity, e){
				e.preventDefault();
				var me = this;
				
				// Executa todos as funcões declaradas nos arquivos separados
				$.each( executes.onShowSub, function( key, func ) {
					func(entity);
					me.subEntitiesEdit = entity;
				});
			},

			addPesoTalhao: function(e){
				e.preventDefault();
				var me = this;

				// Executa todos as funcões declaradas nos arquivos separados
				$.each( executes.onCreateSub, function( key, func ) {
					func( (me.subEntitiesEdit ? me.subEntitiesEdit : me.newEntity.SafraTalhaoPesagemProducao) );
				});

				// retira valores null
				me.newEntity.SafraTalhaoPesagemProducao.clean(null);

				var elModal = $('#add{{module|capitalize}}');
				elModal.modal('refresh');
			}
		},

		// iniciar
		ready: function () {
			this.fetchData();
			this.fetchSubEntitiesData();
			start();
		}
	});
    

	</script>

{% endblock content %}